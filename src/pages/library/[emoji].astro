---
import Header from '@/components/shared/Header/Header.astro';
import Footer from '@/components/shared/Footer/Footer.astro';
import JavascriptLibraries from '@/components/shared/JavascriptLibraries.astro';
import MetaHeadContent from '@/components/shared/MetaHeadContent.astro';
import EmojiDetail from '@/components/library/EmojiDetail/EmojiDetail.astro';
import openmojiJsonUtil from '../../util/openmojiJsonUtil'
import generalUtil from '../../util/generalUtil'
import emojipediaUtil from '../../util/emojipediaUtil'

const openmoji = Astro.props.openMojiData
const {skintoneVariations} = Astro.props
const {skintoneCombinations} = Astro.props
const {emojiPedia} = Astro.props

export async function getStaticPaths() {
  const uniqueEmojis = openmojiJsonUtil.getUniqueEmojis();
  const allSkintoneVariations = openmojiJsonUtil.getSkintoneVariationsForEachEmoji();
  const allSkintoneCombinations = openmojiJsonUtil.clusterSkintoneVariationsBySkinIdForAllEmojis(uniqueEmojis);
  const emojipediaDescriptions = emojipediaUtil.getDescriptionForAllEmoji()

  let emojiPages = [];
  for(let key in uniqueEmojis){
    const emojiData = uniqueEmojis[key]
    
    emojiPages.push({
      params: { emoji: 'emoji-' + emojiData.hexcode},
      props: {
        openMojiData: emojiData,
        skintoneVariations: allSkintoneVariations[emojiData.hexcode],
        skintoneCombinations: allSkintoneCombinations[emojiData.hexcode],
        emojiPedia: emojipediaDescriptions[emojiData.hexcode] || undefined
      }
    })
  }
  return emojiPages;
}
---
<html lang="en">
  <head>
      <MetaHeadContent title={generalUtil.capitalizeFirstLetter(openmoji.annotation) + " Â· OpenMoji"} titleOG={generalUtil.capitalizeFirstLetter(openmoji.annotation)}/>
  </head>
  <body>
    <Header color="red"/>
    <EmojiDetail openMojiData={openmoji} skintoneVariations={skintoneVariations} skintoneCombinations={skintoneCombinations} emojiPedia={emojiPedia}/>
  </body>
  <Footer/>
  <JavascriptLibraries/>
</html>